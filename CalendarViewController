//
//  CalendarCareerViewController.swift
//  AppBookLite-Student
//
//  Created by Rachael Mathew on 6/23/20.
//  Copyright Â© 2020 Project RAISE. All rights reserved.
//
import UIKit

class CalendarCareerViewController: InjectableViewController {
    
    // MARK: Views
    
    private lazy var todayButton: UIBarButtonItem = {
        let button = UIBarButtonItem(title: StringID.a74202b8afd354fb18988bce402acb90a.localized, style: .done, target: self, action: #selector(today))
         
        button.tintColor = .red
        return button
    }()
    
    private lazy var createEventButton: UIBarButtonItem = {
        let button = UIBarButtonItem(title: StringID.aa222645a92c24f5db16eca13f16b09d2.localized, style: .plain, target: self, action: #selector(createEvent))
         
        button.tintColor = .red
        return button
    }()
    
    private lazy var segmentedControl: UISegmentedControl = {
        let array: [CalendarType] = CalendarType.allCases
        let control = UISegmentedControl(items: array.map({ $0.rawValue.capitalized }))
        control.tintColor = .red
        control.selectedSegmentIndex = 0
        control.addTarget(self, action: #selector(switchCalendar), for: .valueChanged)
        return control
    }()
    
    private lazy var style: StyleCalView = {
        var style = StyleCalView()
        
        style.timeline.widthEventViewer = 500
        
        style.timeline.startFromFirstEvent = false
        style.followInSystemTheme = true
        style.timeline.offsetTimeY = 80
        style.timeline.offsetEvent = 3
        style.timeline.currentLineHourWidth = 40
        style.allDay.isPinned = true
        style.startWeekDay = .sunday
        style.timeHourSystem = .twelveHour
        style.event.isEnableMoveEvent = true
        return style
    }()
    @objc func recieveCareerCalendarEdittedEvent(_ notification: Notification) {
      
        calendarView.reloadData()
    
    }
    @objc func weeklyEventEdited(_ notification: Notification) {
    
        let event = notification.object as! [Any]
   
        appendEvent(eventTitle: event[0] as! String, location: event[1] as! String, repeated: event[2] as! Bool, startDate: event[3] as! Date, endDate: event[4] as! Date, isAllDay: event[6] as! Bool, backgroundColor: event[5] as! UIColor)
    
    }
    
    private lazy var calendarView: CalendarView = {
        let calendar = CalendarView(frame: CGRect(x: 0, y: 27, width: view.frame.width / 2, height: view.frame.height - 60), date: selectDate, style: style)
        calendar.delegate = self
        calendar.dataSource = self
        calendar.translatesAutoresizingMaskIntoConstraints = false
        return calendar
    }()
   
    private lazy var eventViewer: EventViewer = {
       let view = EventViewer(frame: CGRect(x: 0, y: 0, width: 300, height: calendarView.frame.height))
       return view
    }()

    // MARK: Data
    static var events: [EventCalView] = {
        let events = Database.fetchAllCalendarEvents()
        return events
    }()
    
    private var selectDate: Date = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        return formatter.date(from: "01.01.2020") ?? Date()
    }()

    // MARK: Init
    
    init() {
        super.init(nibName: nil, bundle: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(recieveCareerCalendarEdittedEvent(_:)), name: .careerCalendarEdittedEvent, object: nil)
         NotificationCenter.default.addObserver(self, selector: #selector(weeklyEventEdited(_:)), name: .weeklyEventEdited, object: nil)
        
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: View Lifecyle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .systemBackground
        
        view.addSubview(calendarView)
        navigationItem.titleView = segmentedControl
        navigationItem.rightBarButtonItem = todayButton
        navigationItem.leftBarButtonItem = createEventButton
        // ADDED
        
        let navigationBar = UINavigationBar()
        navigationBar.frame = CGRect(x: 0, y: 0, width: view.frame.size.width / 2, height: 60)
        navigationBar.setItems([navigationItem], animated: false)
        self.view.addSubview(navigationBar)

        calendarView.addEventViewToDay(view: eventViewer)
        
        self.calendarView.reloadData()
      
    }
    func existingEventIndex(id: Int) {
        var newEvents: [EventCalView] = []
        
        for event in CalendarCareerViewController.events {
                if event.id != id {
                    newEvents.append(event)
                }
            }
        CalendarCareerViewController.events = newEvents
            
    }
    @objc func createEvent(_ sender: UIBarButtonItem) {
        
        let createEventModal = CreateCalendarEventModal()
        createEventModal.delegate = self
        createEventModal.openAsModal()
        
    }
    
    @objc func today(sender: UIBarButtonItem) {
        calendarView.scrollTo(Date())
    }
    
    @objc func switchCalendar(sender: UISegmentedControl) {
        let type = CalendarType.allCases[sender.selectedSegmentIndex]
        calendarView.set(type: type, date: selectDate)
    }
    
}

extension CalendarCareerViewController: CreateCalendarEventModalDelegate {

    func appendEvent(eventTitle: String, location: String, repeated: Bool, startDate: Date, endDate: Date, isAllDay: Bool, backgroundColor: UIColor, idEvent: Int = -1) {
   
        if startDate != endDate && endDate > startDate {
            
            var event = EventCalView(id: CalendarCareerViewController.events.count, title: eventTitle, location: location, repeated: repeated, startDate: startDate, endDate: endDate, backgroundColor: backgroundColor, isAllDay: isAllDay)

            if isAllDay {
                event = EventCalView(id: CalendarCareerViewController.events.count, title: eventTitle, location: location, repeated: repeated, startDate: startDate.startOfDay!, endDate: endDate.endOfDay!, backgroundColor: backgroundColor, isAllDay: isAllDay)
            }
            
            if !repeated {
                CalendarCareerViewController.events.append(event)
                Database.insert(event: event)
            } else {
                var startDateWeekly = startDate
                var endDateWeekly = endDate
                for n in 1...4 {
          
                    var dateComponent = DateComponents()
                    
                    dateComponent.day = 7
                    if n == 1 {
                        dateComponent.day = 0
                    }
                    startDateWeekly = Calendar.current.date(byAdding: dateComponent, to: startDateWeekly)!
                    endDateWeekly = Calendar.current.date(byAdding: dateComponent, to: endDateWeekly)!
                    let eventWeekly = EventCalView(id: CalendarCareerViewController.events.count, title: eventTitle, location: location, repeated: repeated, startDate: startDateWeekly, endDate: endDateWeekly, backgroundColor: backgroundColor, isAllDay: isAllDay)
                    
                    CalendarCareerViewController.events.append(eventWeekly)
                    
                }
                Database.repeatEventInsert(event: event)
            }
            
        }
            calendarView.reloadData()
        
    }
    
}

extension CalendarCareerViewController: CalendarDelegate {
    func didChangeEvent(_ event: EventCalView, start: Date?, end: Date?) {
        var eventTemp = event
        guard let startTemp = start, let endTemp = end else { return }
        
        let startTime = timeFormatter(date: startTemp)
        let endTime = timeFormatter(date: endTemp)
        eventTemp.startDate = startTemp
        eventTemp.endDate = endTemp
        CalendarCareerViewController.events[eventTemp.id].startDate = startTemp
        CalendarCareerViewController.events[eventTemp.id].endDate = endTemp
        Database.updateEvent(event: eventTemp)
        eventTemp.title = "\(startTime) - \(endTime)\n new time for\n \(eventTemp.title)"
        
        if let idx = CalendarCareerViewController.events.firstIndex(where: { $0.compare(eventTemp) }) {
            CalendarCareerViewController.events.remove(at: idx)
            CalendarCareerViewController.events.append(eventTemp)
            calendarView.reloadData()
        }
    }
    
    func didAddEvent(_ date: Date?) {
        print(date)
    }
    
    func didSelectDate(_ date: Date?, type: CalendarType, frame: CGRect?) {
        selectDate = date ?? Date()
        calendarView.reloadData()
    }
    
    func didSelectEvent(_ event: EventCalView, type: CalendarType, frame: CGRect?) {
        print(type, event)
        switch type {
        case .day:
            eventViewer.text = event.title
        default:
            break
        }
    }
    
    func didSelectMore(_ date: Date, frame: CGRect?) {
        print(date)
    }
    
    func eventViewerFrame(_ frame: CGRect) {
        eventViewer.reloadFrame(frame: frame)
    }
}

extension CalendarCareerViewController: CalendarDataSource {
    func eventsForCalendar() -> [EventCalView] {
        return CalendarCareerViewController.events
    }
    
    private var dates: [Date] {
        return Array(0...10).compactMap({ Calendar.current.date(byAdding: .day, value: $0, to: Date()) })
    }
    
    func willDisplayDate(_ date: Date?, events: [EventCalView]) -> DateStyle? {
        guard dates.first(where: { $0.year == date?.year && $0.month == date?.month && $0.day == date?.day }) != nil else { return nil }
        
        return DateStyle(backgroundColor: .clear, textColor: .black, dotBackgroundColor: .red)
    }
}

extension CalendarCareerViewController {
    
    func timeFormatter(date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = style.timeHourSystem == .twelveHour ? "h:mm a" : "HH:mm"
        return formatter.string(from: date)
    }
    
}
